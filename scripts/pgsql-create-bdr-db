#!/bin/bash

pgsql_show_help() {
  echo "This script creates a new BDR enabled database."
  echo ""
  echo "Usage: pgsql-create-bdr-db -d bdr_test -o postgres -n node1 -ip 127.0.0.1 -p 5432"
  echo ""
  echo "-d, --database               The new database name."
  echo "-o, --owner                  The new database owner."
  echo ""
  echo "BDR Options:"
  echo ""
  echo "-n, --name                  The local node name."
  echo "-ip, --address              The local address."
  echo "-p, --port                  The local port."
  echo ""
  echo "-j, --join                  A flag indicating to the script that it should join a group and not create one."
  echo "-rip, --remote_address      The address to the remote host where the BDR group was created."
  echo "-rp, --remote_port          The port on the remote host where the BDR group was created."
}

pgsql_create_db() {
  sudo -u postgres psql -U postgres -d postgres \
       -c "CREATE DATABASE $1 OWNER $2;"
}

pgsql_create_extensions() {
  sudo -u postgres psql -U postgres -d "$1" \
       -c "CREATE EXTENSION btree_gist; \
           CREATE EXTENSION bdr;"
}

pgsql_create_bdr_group() {
  sudo -u postgres psql -U postgres -d "$4" \
       -c "SELECT bdr.bdr_group_create( \
           local_node_name := '$1', \
           node_external_dsn := 'host=$2 port=$3 dbname=$4' \
          ); \
          SELECT bdr.bdr_node_join_wait_for_ready();"
}

pgsql_join_bdr_group() {
  sudo -u postgres psql -U postgres -d "$6" \
       -c "SELECT bdr.bdr_group_join( \
           local_node_name := '$1', \
           node_external_dsn := 'host=$2 port=$3 dbname=$6', \
           join_using_dsn := 'host=$4 port=$5 dbname=$6'
          ); \
          SELECT bdr.bdr_node_join_wait_for_ready();"
}

database=
owner=
name=
address=
port=

join_group=0
remote_address=
remote_port=

while :; do
  case $1 in
    -\?|--help)
      pgsql_show_help
      exit
      ;;
    -d|--database)
      if [ -n "$2" ]; then
        database="$2"
        shift
      else
        printf 'ERROR: "--database" requires a valid name.\n' >&2
        exit 1
      fi
      ;;
    -o|--owner)
      if [ -n "$2" ]; then
        owner="$2"
        shift
      else
        printf 'ERROR: "--owner" requires a valid name.\n' >&2
        exit 1
      fi
      ;;
    -n|--name)
      if [ -n "$2" ]; then
        name="$2"
        shift
      else
        printf 'ERROR: "--name" requires a valid name.\n' >&2
        exit 1
      fi
      ;;
    -j|--join)
      join_group=1
      shift
      ;;
    -ip|--address)
      if [ -n "$2" ]; then
        address="$2"
        shift
      else
        printf 'ERROR: "--address" requires a valid address.\n' >&2
        exit 1
      fi
      ;;
    -p|--port)
      if [ -n "$2" ]; then
        port="$2"
        shift
      else
        printf 'ERROR: "--port" requires a valid port number.\n' >&2
        exit 1
      fi
      ;;
    -rip|--remote_address)
      if [ -n "$2" ]; then
        remote_address="$2"
        shift
      else
        printf 'ERROR: "--remote_address requires a valid address.\n' >&2
        exit 1
      fi
      ;;
    -rp|--remote_port)
      if [ -n "$2" ]; then
        remote_port="$2"
        shift
      else
        printf 'ERROR: "--remote_port requires a valid port.\n' >&2
        exit 1
      fi
      ;;
    --)
      shift
      break
      ;;
    -?*)
      printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
      ;;
    *)
      break
  esac
  shift
done

# Update the console.
echo ""
echo "Database:       $database"
echo "Owner:          $owner"
echo "Name:           $name"
echo "Address:        $address"
echo "Port:           $port"
if [ "$join_group" -eq 0 ]; then
  echo "Join Group:     false"
else
  echo "Join Group:     true"
fi
echo "Remote Address: $remote_address"
echo "Remote Port:    $remote_port"
echo ""
# Create the database and add the BDR extensions.
if [ -n "$database" ] && \
   [ -n "$owner" ]; then
  pgsql_create_db $database $owner
  pgsql_create_extensions $database
else
  pgsql_show_help
  exit 1
fi
# Create or join the BDR group.
if [ "$join_group" -eq 0 ]; then
  if [ -n "$name" ] && \
     [ -n "$address" ] && \
     [ -n "$port" ]; then
    pgsql_create_bdr_group $name $address $port $database
    exit 0
  else
    pgsql_show_help
    exit 1
  fi
else
  if [ -n "$name" ] && \
     [ -n "$address" ] && \
     [ -n "$port" ] && \
     [ -n "$remote_address" ] && \
     [ -n "$remote_port" ]; then
    pgsql_join_bdr_group $name $address $port $remote_address remote_port $database
    exit 0
  else
    pgsql_show_help
    exit 1
  fi
fi

